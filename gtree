#!/bin/bash

# gtree - GitWorkTree Feature Development Command for Claude Code
# Provides isolated feature development with Claude Code sub-agent delegation

set -e

# Configuration
TREES_DIR=".trees"
LOG_FILE="$TREES_DIR/.gtree.log"
CONFIG_FILE="$TREES_DIR/.gtree.config"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Utility functions
log() {
    echo -e "${GREEN}[gtree]${NC} $1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE" 2>/dev/null || true
}

error() {
    echo -e "${RED}[gtree ERROR]${NC} $1" >&2
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1" >> "$LOG_FILE" 2>/dev/null || true
    exit 1
}

warning() {
    echo -e "${YELLOW}[gtree WARNING]${NC} $1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1" >> "$LOG_FILE" 2>/dev/null || true
}

info() {
    echo -e "${BLUE}[gtree]${NC} $1"
}

success() {
    echo -e "${GREEN}[gtree SUCCESS]${NC} $1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] SUCCESS: $1" >> "$LOG_FILE" 2>/dev/null || true
}

# Check dependencies
check_dependencies() {
    if ! command -v git &> /dev/null; then
        error "git is required but not installed"
    fi
    
    if ! git rev-parse --git-dir &> /dev/null; then
        error "Not in a git repository"
    fi
}

# Initialize gtree in repository
init_gtree() {
    log "Initializing gtree for Claude Code in repository..."
    
    # Create trees directory
    mkdir -p "$TREES_DIR"
    
    # Create gitignore entry for trees
    if [[ -f ".gitignore" ]]; then
        if ! grep -q "^\.trees/\*$" ".gitignore"; then
            echo ".trees/*" >> ".gitignore"
            log "Added .trees/* to .gitignore"
        fi
    else
        echo ".trees/*" > ".gitignore"
        log "Created .gitignore with .trees/* entry"
    fi
    
    # Initialize configuration
    cat > "$CONFIG_FILE" << 'EOF'
# gtree configuration for Claude Code
DEFAULT_BRANCH="main"
AUTO_CLEANUP=true
MAX_FEATURES=5
SUBAGENT_TYPE="general-purpose"
COMMIT_TEMPLATE="feat(<feature>): <description>

<detailed_changes>

Generated by gtree with Claude Code
Co-authored-by: Claude <claude@anthropic.com>"
EOF
    
    # Initialize log file
    touch "$LOG_FILE"
    
    success "gtree initialized for Claude Code!"
    info "Configuration saved to $CONFIG_FILE"
    info "Logs will be saved to $LOG_FILE"
    echo ""
    echo -e "${CYAN}Next steps:${NC}"
    echo "1. gtree create <feature-name> 'Feature description'"
    echo "2. gtree work <feature-name> 'Detailed task description'"
    echo "3. gtree merge <feature-name>"
}

# Load configuration
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    fi
}

# List active features
list_features() {
    if [[ ! -d "$TREES_DIR" ]]; then
        warning "gtree not initialized. Run: gtree init"
        return 1
    fi
    
    echo -e "${CYAN}Active Features:${NC}"
    echo "=================="
    
    local found_features=false
    for feature_dir in "$TREES_DIR"/*; do
        if [[ -d "$feature_dir" && $(basename "$feature_dir") != ".git" ]]; then
            local feature_name=$(basename "$feature_dir")
            local branch_name="feature/$feature_name"
            
            # Check if worktree exists
            if git worktree list | grep -q "$feature_dir"; then
                local status_file="$feature_dir/.gtree_status"
                local status="active"
                local claude_session=""
                
                if [[ -f "$status_file" ]]; then
                    source "$status_file"
                fi
                
                echo -e "${GREEN}📁 $feature_name${NC}"
                echo -e "   Branch: $branch_name"
                echo -e "   Status: $status"
                echo -e "   Path: $feature_dir"
                
                if [[ -n "$claude_session" ]] && [[ "$status" == "working" ]]; then
                    echo -e "   Claude Code: ${GREEN}active${NC}"
                else
                    echo -e "   Claude Code: ${RED}inactive${NC}"
                fi
                
                # Show recent changes count
                if [[ -f "$feature_dir/.gtree_changes.md" ]]; then
                    local change_count=$(grep -c "^### " "$feature_dir/.gtree_changes.md" 2>/dev/null || echo "0")
                    echo -e "   Changes: $change_count logged"
                fi
                
                echo ""
                found_features=true
            fi
        fi
    done
    
    if [[ "$found_features" == false ]]; then
        info "No active features found"
        echo ""
        echo -e "${CYAN}Create your first feature:${NC}"
        echo "gtree create <feature-name> 'Feature description'"
    fi
}

# Create new feature
create_feature() {
    local feature_name="$1"
    local description="$2"
    
    if [[ -z "$feature_name" ]]; then
        error "Feature name is required. Usage: gtree create <feature-name> [description]"
    fi
    
    # Validate feature name
    if [[ ! "$feature_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        error "Feature name can only contain letters, numbers, hyphens, and underscores"
    fi
    
    local feature_dir="$TREES_DIR/$feature_name"
    local branch_name="feature/$feature_name"
    
    # Check if feature already exists
    if [[ -d "$feature_dir" ]]; then
        error "Feature '$feature_name' already exists"
    fi
    
    # Ensure we're on main branch
    local current_branch=$(git branch --show-current)
    if [[ "$current_branch" != "${DEFAULT_BRANCH:-main}" ]]; then
        warning "Not on main branch. Switching to ${DEFAULT_BRANCH:-main}..."
        git checkout "${DEFAULT_BRANCH:-main}"
    fi
    
    log "Creating feature: $feature_name"
    
    # Create feature branch
    git checkout -b "$branch_name"
    
    # Return to main before creating worktree
    git checkout "${DEFAULT_BRANCH:-main}"
    
    # Create worktree
    git worktree add "$feature_dir" "$branch_name"
    
    # Create feature metadata
    cat > "$feature_dir/.gtree_metadata" << EOF
FEATURE_NAME="$feature_name"
BRANCH_NAME="$branch_name"
CREATED_AT="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
DESCRIPTION="$description"
AUTHOR="$(git config user.name) <$(git config user.email)>"
EOF
    
    # Create status file
    cat > "$feature_dir/.gtree_status" << EOF
status="created"
claude_session=""
last_updated="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
EOF
    
    # Create change log
    cat > "$feature_dir/.gtree_changes.md" << EOF
# Feature: $feature_name

**Description:** $description

**Created:** $(date)

**Author:** $(git config user.name)

## Changes Log

### $(date '+%Y-%m-%d %H:%M') - Feature Created
- Initialized feature branch: $branch_name
- Created isolated worktree: $feature_dir
- Ready for Claude Code development

EOF
    
    success "Feature '$feature_name' created successfully!"
    info "Worktree: $feature_dir"
    info "Branch: $branch_name"
    
    # Show next steps
    echo ""
    echo -e "${CYAN}Next steps:${NC}"
    echo "1. gtree work $feature_name - Start development with Claude Code"
    echo "2. gtree status $feature_name - Check feature status"
    echo "3. gtree merge $feature_name - Merge when complete"
}

# Start working on feature with Claude Code
work_on_feature() {
    local feature_name="$1"
    local task_description="$2"
    
    if [[ -z "$feature_name" ]]; then
        error "Feature name is required. Usage: gtree work <feature-name> [task-description]"
    fi
    
    local feature_dir="$TREES_DIR/$feature_name"
    
    if [[ ! -d "$feature_dir" ]]; then
        error "Feature '$feature_name' does not exist. Create it first with: gtree create $feature_name"
    fi
    
    # Check if already working
    local status_file="$feature_dir/.gtree_status"
    if [[ -f "$status_file" ]]; then
        source "$status_file"
        if [[ "$status" == "working" ]]; then
            warning "Feature '$feature_name' is already being worked on"
            echo "Use 'gtree status $feature_name' to check progress"
            return 1
        fi
    fi
    
    log "Starting Claude Code development on feature: $feature_name"
    
    # Update status
    cat > "$feature_dir/.gtree_status" << EOF
status="working"
claude_session="active"
last_updated="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
started_at="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
EOF
    
    # Update change log
    cat >> "$feature_dir/.gtree_changes.md" << EOF

### $(date '+%Y-%m-%d %H:%M') - Development Started
- Claude Code session initiated
- Task: $(if [[ -n "$task_description" ]]; then echo "$task_description"; else echo "Implement $feature_name feature"; fi)

EOF
    
    # Create detailed prompt for Claude Code
    local detailed_prompt=""
    if [[ -n "$task_description" ]]; then
        detailed_prompt="

## Specific Task
$task_description

"
    fi
    
    # Load feature metadata
    source "$feature_dir/.gtree_metadata"
    
    # Create the complete prompt
    local complete_prompt="Working on feature '$feature_name' in isolated git worktree.

## Feature Context
- **Feature Name:** $feature_name
- **Description:** $DESCRIPTION
- **Worktree Path:** $feature_dir
- **Branch:** $BRANCH_NAME

## Current Working Directory
The working directory has been set to the feature worktree: $feature_dir

## Development Guidelines
1. **Analyze First:** Understand the existing codebase structure and patterns
2. **Plan Implementation:** Break down the work into logical steps
3. **Follow Conventions:** Use existing code patterns and architectural decisions
4. **Track Changes:** Log significant changes in .gtree_changes.md using this format:
   \`\`\`
   ### $(date '+%Y-%m-%d %H:%M') - [Change Description]
   - Specific change made
   - Reasoning behind the change
   - Files affected
   \`\`\`
5. **Test Thoroughly:** Verify functionality works as expected
6. **Commit Often:** Make logical commits with clear messages

$detailed_prompt

## Tools Available
You have access to all standard development tools:
- Read, Write, Edit files
- Bash commands for testing and building
- Git operations within the worktree
- TodoWrite for task management

## Important Notes
- You are working in an isolated worktree - changes here don't affect main branch
- All changes will be tracked and logged automatically
- When complete, the feature will be merged with a comprehensive commit message
- Focus on implementing the feature requirements while maintaining code quality

Start by analyzing the current codebase to understand how to best implement this feature."
    
    success "Claude Code development started for feature '$feature_name'!"
    info "Working in: $feature_dir"
    info "Session: active"
    
    echo ""
    echo -e "${CYAN}Claude Code will now work on this feature.${NC}"
    echo "Monitor progress with:"
    echo "- gtree status $feature_name"
    echo "- Check files in $feature_dir"
    
    echo ""
    echo -e "${YELLOW}Providing task to Claude Code...${NC}"
    echo "$complete_prompt"
}

# Show feature status
show_status() {
    local feature_name="$1"
    
    if [[ -z "$feature_name" ]]; then
        list_features
        return
    fi
    
    local feature_dir="$TREES_DIR/$feature_name"
    
    if [[ ! -d "$feature_dir" ]]; then
        error "Feature '$feature_name' does not exist"
    fi
    
    echo -e "${CYAN}Feature Status: $feature_name${NC}"
    echo "================================"
    
    # Load metadata
    if [[ -f "$feature_dir/.gtree_metadata" ]]; then
        source "$feature_dir/.gtree_metadata"
        echo -e "Description: $DESCRIPTION"
        echo -e "Created: $CREATED_AT"
        echo -e "Author: $AUTHOR"
        echo -e "Branch: $BRANCH_NAME"
        echo ""
    fi
    
    # Load status
    if [[ -f "$feature_dir/.gtree_status" ]]; then
        source "$feature_dir/.gtree_status"
        echo -e "Status: $status"
        echo -e "Last Updated: $last_updated"
        
        if [[ "$status" == "working" ]]; then
            echo -e "Claude Code: ${GREEN}active${NC}"
            if [[ -n "$started_at" ]]; then
                echo -e "Started: $started_at"
            fi
        else
            echo -e "Claude Code: ${RED}inactive${NC}"
        fi
        echo ""
    fi
    
    # Show git status in worktree
    echo -e "${BLUE}Git Status in Worktree:${NC}"
    cd "$feature_dir"
    if [[ -n $(git status --porcelain) ]]; then
        git status --porcelain | while IFS= read -r line; do
            echo "  $line"
        done
    else
        echo "  No changes"
    fi
    
    # Show commit count
    local commit_count=$(git rev-list --count "${DEFAULT_BRANCH:-main}..HEAD" 2>/dev/null || echo "0")
    echo "  Commits ahead of main: $commit_count"
    
    cd - > /dev/null
    
    # Show recent changes
    if [[ -f "$feature_dir/.gtree_changes.md" ]]; then
        echo ""
        echo -e "${BLUE}Recent Changes:${NC}"
        # Show last 10 lines of changes, excluding empty lines
        tail -n 15 "$feature_dir/.gtree_changes.md" | grep -v "^$" | head -10
    fi
}

# Complete feature (mark as ready for merge)
complete_feature() {
    local feature_name="$1"
    
    if [[ -z "$feature_name" ]]; then
        error "Feature name is required. Usage: gtree complete <feature-name>"
    fi
    
    local feature_dir="$TREES_DIR/$feature_name"
    
    if [[ ! -d "$feature_dir" ]]; then
        error "Feature '$feature_name' does not exist"
    fi
    
    log "Completing feature: $feature_name"
    
    # Update status
    cat > "$feature_dir/.gtree_status" << EOF
status="complete"
claude_session=""
last_updated="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
completed_at="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
EOF
    
    # Add completion entry to change log
    cat >> "$feature_dir/.gtree_changes.md" << EOF

### $(date '+%Y-%m-%d %H:%M') - Feature Completed
- Development phase completed
- Ready for review and merge
- All changes committed and documented

EOF
    
    success "Feature '$feature_name' marked as complete!"
    info "Ready for merge. Run: gtree merge $feature_name"
}

# Merge feature back to main
merge_feature() {
    local feature_name="$1"
    local force_merge="$2"
    
    if [[ -z "$feature_name" ]]; then
        error "Feature name is required. Usage: gtree merge <feature-name> [--force]"
    fi
    
    local feature_dir="$TREES_DIR/$feature_name"
    local branch_name="feature/$feature_name"
    
    if [[ ! -d "$feature_dir" ]]; then
        error "Feature '$feature_name' does not exist"
    fi
    
    # Check if feature is complete (unless forced)
    if [[ "$force_merge" != "--force" ]]; then
        local status_file="$feature_dir/.gtree_status"
        if [[ -f "$status_file" ]]; then
            source "$status_file"
            if [[ "$status" != "complete" ]]; then
                error "Feature is not marked as complete. Use 'gtree complete $feature_name' first or 'gtree merge $feature_name --force'"
            fi
        fi
    fi
    
    log "Merging feature: $feature_name"
    
    # Switch to feature worktree and commit any uncommitted changes
    cd "$feature_dir"
    
    # Add final completion timestamp to changes log
    cat >> ".gtree_changes.md" << EOF

### $(date '+%Y-%m-%d %H:%M') - Pre-Merge Commit
- Final changes committed before merge
- Feature ready for integration

EOF
    
    # Add and commit any remaining changes
    if [[ -n $(git status --porcelain) ]]; then
        log "Committing final changes..."
        git add .
        git commit -m "feat($feature_name): Final changes before merge

- Completed implementation of $feature_name
- All changes documented and tested
- Ready for integration to main branch"
    fi
    
    cd - > /dev/null
    
    # Generate comprehensive commit message
    local commit_message
    commit_message=$(generate_commit_message "$feature_name" "$feature_dir")
    
    # Switch to main branch
    git checkout "${DEFAULT_BRANCH:-main}"
    
    # Update main branch
    git pull origin "${DEFAULT_BRANCH:-main}" 2>/dev/null || warning "Failed to pull latest changes"
    
    # Merge feature branch with no-fast-forward to preserve history
    log "Merging $branch_name into ${DEFAULT_BRANCH:-main}..."
    
    if git merge --no-ff "$branch_name" -m "$commit_message"; then
        success "Feature '$feature_name' merged successfully!"
        
        # Show merge summary
        echo ""
        echo -e "${CYAN}Merge Summary:${NC}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        git log --oneline -1
        echo ""
        
        # Show statistics
        local files_changed=$(git diff --name-only HEAD~1 | wc -l | tr -d ' ')
        local lines_added=$(git diff --stat HEAD~1 | tail -1 | grep -o '[0-9]\+ insertions' | grep -o '[0-9]\+' || echo "0")
        local lines_deleted=$(git diff --stat HEAD~1 | tail -1 | grep -o '[0-9]\+ deletions' | grep -o '[0-9]\+' || echo "0")
        
        echo -e "${BLUE}Statistics:${NC}"
        echo "Files changed: $files_changed"
        echo "Lines added: $lines_added"
        echo "Lines deleted: $lines_deleted"
        
        # Clean up if auto cleanup is enabled
        if [[ "${AUTO_CLEANUP:-true}" == "true" ]]; then
            echo ""
            log "Auto-cleanup enabled, removing worktree and branch..."
            cleanup_feature "$feature_name" "silent"
        else
            echo ""
            info "Feature branch and worktree preserved. Use 'gtree cleanup $feature_name' to remove them."
        fi
        
    else
        error "Failed to merge feature '$feature_name'. Please resolve conflicts manually in the worktree."
    fi
}

# Generate comprehensive commit message
generate_commit_message() {
    local feature_name="$1"
    local feature_dir="$2"
    
    # Load metadata
    local description="Feature implementation"
    if [[ -f "$feature_dir/.gtree_metadata" ]]; then
        source "$feature_dir/.gtree_metadata"
        description="$DESCRIPTION"
    fi
    
    # Extract changes from log
    local changes_summary=""
    if [[ -f "$feature_dir/.gtree_changes.md" ]]; then
        # Extract meaningful changes, skip headers and empty lines
        changes_summary=$(grep -E "^- |^  - " "$feature_dir/.gtree_changes.md" | head -15 | sed 's/^/    /')
    fi
    
    # Get file statistics from worktree
    cd "$feature_dir"
    local files_changed=$(git diff --name-only "${DEFAULT_BRANCH:-main}" | wc -l | tr -d ' ')
    local commit_count=$(git rev-list --count "${DEFAULT_BRANCH:-main}..HEAD" 2>/dev/null || echo "1")
    cd - > /dev/null
    
    # Create comprehensive commit message
    cat << EOF
feat($feature_name): $description

## Feature Implementation
- Feature: $feature_name  
- Development: Isolated worktree with Claude Code
- Files changed: $files_changed
- Commits: $commit_count

## Changes Made
$changes_summary

## Development Process
- Created isolated git worktree in .trees/$feature_name
- Used Claude Code for AI-assisted development
- All changes tracked and documented
- Comprehensive testing and validation

Generated by gtree with Claude Code
Co-authored-by: Claude <claude@anthropic.com>
EOF
}

# Clean up feature
cleanup_feature() {
    local feature_name="$1"
    local silent="$2"
    
    if [[ -z "$feature_name" ]]; then
        error "Feature name is required. Usage: gtree cleanup <feature-name>"
    fi
    
    local feature_dir="$TREES_DIR/$feature_name"
    local branch_name="feature/$feature_name"
    
    if [[ ! -d "$feature_dir" ]]; then
        if [[ "$silent" != "silent" ]]; then
            warning "Feature '$feature_name' does not exist"
        fi
        return
    fi
    
    if [[ "$silent" != "silent" ]]; then
        log "Cleaning up feature: $feature_name"
    fi
    
    # Remove worktree
    if git worktree list | grep -q "$feature_dir"; then
        git worktree remove "$feature_dir" --force
        if [[ "$silent" != "silent" ]]; then
            log "Removed worktree: $feature_dir"
        fi
    fi
    
    # Delete feature branch
    if git branch | grep -q "$branch_name"; then
        git branch -D "$branch_name"
        if [[ "$silent" != "silent" ]]; then
            log "Deleted branch: $branch_name"
        fi
    fi
    
    if [[ "$silent" != "silent" ]]; then
        success "Feature '$feature_name' cleaned up successfully"
    fi
}

# Show help
show_help() {
    echo -e "${CYAN}gtree - GitWorkTree Feature Development for Claude Code${NC}"
    echo "======================================================="
    echo ""
    echo -e "${YELLOW}Description:${NC}"
    echo "  Isolated feature development using git worktrees with Claude Code integration."
    echo "  Each feature gets its own branch and directory for conflict-free development."
    echo ""
    echo -e "${YELLOW}Usage:${NC}"
    echo "  gtree <command> [arguments]"
    echo ""
    echo -e "${YELLOW}Commands:${NC}"
    echo "  ${GREEN}init${NC}                    Initialize gtree in repository"
    echo "  ${GREEN}create${NC} <name> [desc]    Create new feature with isolated worktree"
    echo "  ${GREEN}list${NC}                    List all active features"
    echo "  ${GREEN}work${NC} <name> [task]      Start working on feature with Claude Code"
    echo "  ${GREEN}status${NC} [name]           Show feature status (or all if no name)"
    echo "  ${GREEN}complete${NC} <name>         Mark feature as complete"
    echo "  ${GREEN}merge${NC} <name> [--force]  Merge feature to main branch"
    echo "  ${GREEN}cleanup${NC} <name>          Clean up feature branch and worktree"
    echo "  ${GREEN}help${NC}                    Show this help message"
    echo ""
    echo -e "${YELLOW}Workflow Examples:${NC}"
    echo ""
    echo -e "  ${CYAN}# Initialize gtree${NC}"
    echo "  gtree init"
    echo ""
    echo -e "  ${CYAN}# Create and work on a feature${NC}"
    echo "  gtree create sharing-feature 'Add share functionality'"
    echo "  gtree work sharing-feature 'Implement share target UI with club selection'"
    echo ""
    echo -e "  ${CYAN}# Monitor and complete${NC}"
    echo "  gtree status sharing-feature"
    echo "  gtree complete sharing-feature"
    echo "  gtree merge sharing-feature"
    echo ""
    echo -e "${YELLOW}Benefits:${NC}"
    echo "  ✅ Isolated development - no conflicts with main branch"
    echo "  ✅ Claude Code integration - AI-assisted feature development"  
    echo "  ✅ Automatic tracking - all changes logged and documented"
    echo "  ✅ Clean history - comprehensive merge commits"
    echo "  ✅ Easy cleanup - remove completed features automatically"
    echo ""
    echo -e "${YELLOW}Files Created:${NC}"
    echo "  .trees/<feature>/           - Feature worktree directory"
    echo "  .trees/.gtree.config        - Configuration file"
    echo "  .trees/.gtree.log          - Operation log"
}

# Main command dispatcher
main() {
    local command="$1"
    shift
    
    # Check dependencies
    check_dependencies
    
    # Load configuration
    load_config
    
    # Create trees directory if it doesn't exist
    mkdir -p "$TREES_DIR"
    
    case "$command" in
        "init")
            init_gtree "$@"
            ;;
        "create")
            create_feature "$@"
            ;;
        "list"|"ls")
            list_features "$@"
            ;;
        "work"|"start")
            work_on_feature "$@"
            ;;
        "status"|"st")
            show_status "$@"
            ;;
        "complete"|"done")
            complete_feature "$@"
            ;;
        "merge")
            merge_feature "$@"
            ;;
        "cleanup"|"clean")
            cleanup_feature "$@"
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        "")
            show_help
            ;;
        *)
            error "Unknown command: $command. Run 'gtree help' for usage."
            ;;
    esac
}

# Run main function with all arguments
main "$@"